#version 460

struct PushConstantData
{
    vec2 u_invSize;
    int u_mipLevel;
};

layout(push_constant) uniform block
{
	PushConstantData pushConstant;
};

layout (set = 0, binding = 0, rgba16f) uniform image2D outColor;
layout (set=0, binding=1) uniform sampler2D inputSampler;

vec2 offsets[9] = { 
    vec2( 1, 1), vec2( 0, 1), vec2(-1, 1), 
    vec2( 1, 0), vec2( 0, 0), vec2(-1, 0), 
    vec2( 1,-1), vec2( 0,-1), vec2(-1,-1)
};

layout (local_size_x = 16,local_size_y = 16,local_size_z = 1) in;

void main()
{
    uvec2 pos = gl_GlobalInvocationID.xy;
    ivec2 dims = textureSize(inputSampler, 0).xy;
    const vec2 texelSize = 1.0f / vec2(dims.xy);

    vec2 uv = (vec2(pos) + vec2(0.5)) * texelSize; 

    vec4 color = vec4(0,0,0,0);

    vec4 OutColorF;
    if (pushConstant.u_mipLevel == 0)
    {
        for(int i = 0; i < 9; i++)
        {
            color += log(
                max(
                    .01 + texture(inputSampler, uv + (2 * texelSize * offsets[i]) ), 
                    vec4(0.01, 0.01, 0.01, 0.01)
                )
            );
        }
        OutColorF = exp(color / 9.0f);
    }
    else
    {
        for(int i = 0; i < 9; i++)
        {
            color += texture(inputSampler, uv + (2 * texelSize * offsets[i]) );
        }
        OutColorF = color / 9.0f;
    }

    ivec2 ggId = ivec2(gl_GlobalInvocationID.xy);
    if (ggId.x < dims.x && ggId.y < dims.y)
    {
        imageStore(outColor, ivec2(gl_GlobalInvocationID.xy), OutColorF);
        return; 
    }
}