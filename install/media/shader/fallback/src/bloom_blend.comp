#version 460
#extension GL_EXT_nonuniform_qualifier : require

struct PushConstantData
{
    float u_weight;
};

layout(push_constant) uniform block
{
	PushConstantData pushConstant;
};

layout (set = 0, binding = 0, rgba16f) uniform image2D outColor;
layout (set = 0, binding = 1) uniform sampler2D inputSampler;

// add blend.
layout (local_size_x = 16,local_size_y = 16,local_size_z = 1) in;
void main()
{
    ivec2 ggId = ivec2(gl_GlobalInvocationID.xy);
    uvec2 pos = gl_GlobalInvocationID.xy;
    ivec2 dims = textureSize(inputSampler, 0).xy;
    const vec2 texelSize = 1.0f / vec2(dims.xy);
    vec2 uv = (vec2(pos) + vec2(0.5)) * texelSize; 

    vec4 srcColor = pushConstant.u_weight * texture(inputSampler, uv).rgba;
    vec4 dstColor = imageLoad(outColor, ggId);

    // blend mix.
    
    
    if (ggId.x < dims.x && ggId.y < dims.y)
    {
        imageStore(outColor, ivec2(gl_GlobalInvocationID.xy), accum);
        return; 
    }
}